-- MySQL Script generated by MySQL Workbench
-- Sun Apr 16 13:59:34 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Music
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Music` ;

-- -----------------------------------------------------
-- Schema Music
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Music` DEFAULT CHARACTER SET utf8 ;
USE `Music` ;

-- -----------------------------------------------------
-- Table `Music`.`Исполнитель`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Music`.`Исполнитель` ;

CREATE TABLE IF NOT EXISTS `Music`.`Исполнитель` (
  `номер` INT NOT NULL AUTO_INCREMENT,
  `название` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`номер`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Music`.`Альбом`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Music`.`Альбом` ;

CREATE TABLE IF NOT EXISTS `Music`.`Альбом` (
  `номер` INT NOT NULL AUTO_INCREMENT,
  `наименование` VARCHAR(255) NOT NULL,
  `номер_исполнителя` INT NOT NULL,
  PRIMARY KEY (`номер`),
  INDEX `fk_Альбом_Исполнитель_idx` (`номер_исполнителя` ASC),
  CONSTRAINT `fk_Альбом_Исполнитель`
    FOREIGN KEY (`номер_исполнителя`)
    REFERENCES `Music`.`Исполнитель` (`номер`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Music`.`Композиция`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Music`.`Композиция` ;

CREATE TABLE IF NOT EXISTS `Music`.`Композиция` (
  `номер` INT NOT NULL AUTO_INCREMENT,
  `название` VARCHAR(80) NOT NULL,
  `дата_публикации` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `рейтинг` INT(1) NULL,
  `номер_альбома` INT NOT NULL,
  PRIMARY KEY (`номер`),
  INDEX `fk_Композиция_Альбом1_idx` (`номер_альбома` ASC),
  CONSTRAINT `fk_Композиция_Альбом1`
    FOREIGN KEY (`номер_альбома`)
    REFERENCES `Music`.`Альбом` (`номер`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Music`.`Жанр`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Music`.`Жанр` ;

CREATE TABLE IF NOT EXISTS `Music`.`Жанр` (
  `номер` INT NOT NULL AUTO_INCREMENT,
  `название` VARCHAR(60) NOT NULL,
  `описание` TEXT NULL,
  PRIMARY KEY (`номер`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Music`.`Жанр_к_Композиции`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `Music`.`Жанр_к_Композиции` ;

CREATE TABLE IF NOT EXISTS `Music`.`Жанр_к_Композиции` (
  `номер_жанра` INT NOT NULL,
  `номер_композиции` INT NOT NULL,
  PRIMARY KEY (`номер_жанра`, `номер_композиции`),
  INDEX `fk_Жанр_has_Композиция_Композиция1_idx` (`номер_композиции` ASC),
  INDEX `fk_Жанр_has_Композиция_Жанр1_idx` (`номер_жанра` ASC),
  CONSTRAINT `fk_Жанр_has_Композиция_Жанр1`
    FOREIGN KEY (`номер_жанра`)
    REFERENCES `Music`.`Жанр` (`номер`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Жанр_has_Композиция_Композиция1`
    FOREIGN KEY (`номер_композиции`)
    REFERENCES `Music`.`Композиция` (`номер`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `Music`;

DELIMITER $$

USE `Music`$$
DROP TRIGGER IF EXISTS `Music`.`Исполнитель_BEFORE_DELETE` $$
USE `Music`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Music`.`Исполнитель_BEFORE_DELETE` BEFORE DELETE ON `Исполнитель` FOR EACH ROW
BEGIN
  delete from `Альбом` where `номер_исполнителя` = OLD.`номер`;
END
$$


USE `Music`$$
DROP TRIGGER IF EXISTS `Music`.`Альбом_BEFORE_DELETE` $$
USE `Music`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Music`.`Альбом_BEFORE_DELETE` BEFORE DELETE ON `Альбом` FOR EACH ROW
BEGIN
  delete from `Композиция` where `номер_альбома` = OLD.`номер`;
END
$$


USE `Music`$$
DROP TRIGGER IF EXISTS `Music`.`Композиция_BEFORE_DELETE` $$
USE `Music`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Music`.`Композиция_BEFORE_DELETE` BEFORE DELETE ON `Композиция` FOR EACH ROW
BEGIN
  delete from `Жанр_к_композиции` where `номер_композиции` = OLD.`номер`;
END
$$


USE `Music`$$
DROP TRIGGER IF EXISTS `Music`.`Жанр_BEFORE_DELETE` $$
USE `Music`$$
CREATE DEFINER = CURRENT_USER TRIGGER `Music`.`Жанр_BEFORE_DELETE` BEFORE DELETE ON `Жанр` FOR EACH ROW
BEGIN
  delete from `Жанр_к_композиции` where `номер_жанра` = OLD.`номер`;
END
$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
